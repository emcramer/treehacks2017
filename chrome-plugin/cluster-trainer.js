// cluster trainer

var clusterfck = require("clusterfck");
const fs = require("fs");

var biases = [1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
-1,
];


//Train the classifier
	//import the data
var file_path = "curr_txt.txt";
var text = fs.readFileSync(file_path, "utf-8");
var Articles = text.split("*");

var liberal_key_terms =  ["social forces", "social responsibility", 
"free expression", "human rights", "equal rights", "concern", "care", 
"help", "health", "safety", "nutrition", 'basic human dignity', "oppression", 
"diversity", 'deprivation', "alienation", "big corporations", 
"corporate welfare", "ecology", "ecosystem", "biodiversity", "pollution"];

var conservative_key_terms = ["character", "virtue", "discipline", "tough it out", "get tough", 
"tough love", "strong", "self-reliance", "individual responsibility", "backbone", "standards", 
"authority", "heritage", "competition", "earn", "hard work", "enterprise", "property rights", 
"reward", "freedom", "intrusion", "interference", "meddling", "punishment", "human nature", 
'traditional', "common sense", "dependency", "self-indulgent", "elite", "quotas", 
"breakdown", "corrupt", "decay", "rot", "degenerate", "deviant", "lifestyle", "fear"];

var conservative_scores = [];
var liberal_scores = [];

for(i = 0; i < Articles.length; i++){
	//calculate conservative measure
	for(j = 0; j < conservative_key_terms.length; j++){
		var temp_sum = Articles[i].match(/conservative_key_terms[j]/g).length;
		conservative_scores[i] += temp_sum;
	}
	//calculate liberal measure
	for(k=0, k < liberal_key_terms.length; k++){
		var temp_sum = Articles[i].match(/liberal_key_terms[k]/g).length;
		liberal_scores[i] += temp_sum;
	}
}

var values;
for(l = 0; l < Articles.length; l++){
	values[l][0] = conservative_scores[l];
	values[l][1] = liberal_scores[l];
}

// Calculate clusters.
var clusters = clusterfck.kmeans(values, 2);

var json = kmeans.toJSON();

fs.writeFile("clusters.json", raw_classifier, (err) => {
    if (err) {
        console.error(err);
        return;
    };
    console.log("File has been created");
});